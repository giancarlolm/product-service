spring:
  application:
    name: product-service
  cloud:
    config:
      profile: prod
  loadbalancer:
    ribbon:
      enabled: false
    cache:
      enabled: true
      ttl: 30s
  datasource:
    url: jdbc:mysql://localhost:3306/retail?useSSL=false # localhost:puerto/DBNAME?useSSL=false / no usamos SSL
    username: root
    password: rootroot
    driver-class-name: com.mysql.cj.jdbc.Driver
  hikari:
    maximum-pool-size: 10
    minimum-idle: 3
    idle-timeout: 30000
    connection-timeout: 20000
    max-lifetime: 1800000
  data:
    mongodb:
      host: localhost
      port: 27017
      database: retailnosql
  #KAFKA CONFIG
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer  # En caso de usar AVRO
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      properties:
        # Schema Registry URL - siempre en cuando usemos el schema register
        # schema.registry.url: http://localhost:8081
        # Auto registrar schemas
        # auto.register.schemas: true
        # Usar versi칩n m치s reciente
        use.latest.version: true
        # Idempotencia para evitar duplicados
        enable.idempotence: true


redis:
  host: localhost
  port: 6379
  password:
  timeout: 2s                 # Timeout en segundos (s)
  lettuce:
    pool:
      max-active: 8
      max-idle: 8
      min-idle: 0
  #time-to-live: 1m            # Tiempo de vida del cache

resilience4j:
  retry:
    configs:
      default:
        maxAttempts: 5         # intenta hasta 3 veces
        waitDuration: 10s       # espera  5s entre cada intento
    instances:
      productService:
        baseConfig: default
        waitDuration: 10s
  circuitbreaker:
    configs:
      default:
        slidingWindowType: COUNT_BASED  # Medici칩n por conteo
        slidingWindowSize: 10 # Ventana de m치ximo de peticiones, si abajo es 50 = 10*0.5 = Error
        failureRateThreshold: 50 # Porcentaje de Fallos de peticiones
        waitDurationInOpenState: 60s # Tiempo de espera en estado Open
        #permittedNumberOfCallsInHalfOpenState: 5
    instances:
      customerService:
        baseConfig: default
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 5
      dataBase:
        baseConfig: default
        waitDurationInOpenState: 30s

app:
  kafka:
    error-topic: "application-errors"
    error-producer:
      enabled: false
      batch-size: 1000
      linger-ms: 10
  service:
    name: "product-service"
    version: "1.0.0"

# OpenAPI/Swagger Configuration
springdoc:
  swagger-ui:
    path: /swagger-ui
  api-docs:
    path: /v3/api-docs


server:
  #port: 0
  port: 9097
  error:
    include-message: always

eureka:
  instance:
    instance-id: ${spring.application.name}-${random.int(10000,99999)}-${spring.application.instance_id:${random.value}}
    #instance-id: ${spring.application.name}
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true

logging:
  level:
    root: INFO
    com.mitocode.product_service: DEBUG
    org.springframework.cloud.loadbalancer: DEBUG
    org.springframework.cloud.openfeign: DEBUG